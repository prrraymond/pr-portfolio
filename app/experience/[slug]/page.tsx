import { notFound } from "next/navigation"
import Image from "next/image"
import { Badge } from "@/components/ui/badge"
import { ExternalLink } from "lucide-react"
import { getContentById, getAllContent } from "@/lib/airtable"
import { getEraStyles } from "@/lib/era-styles"
import HeaderMenu from "@/components/header-menu"
import { getSkillsForDisplay } from "@/lib/skills-helper"
import SkillsByCategory from "@/components/skills-by-category"
import ToolIcon from "@/components/tool-icon"
import { getToolDisplayName } from "@/lib/tool-mappings"
import { locationSortToEra } from "@/components/content-section"

export const dynamicParams = true // Allow dynamic params that aren't generated by generateStaticParams
export const revalidate = 0 // Disable caching for this page

export default async function ExperiencePage({ params }: { params: { slug: string } }) {
  // Find the experience item by slug
  const experience = await getContentById(params.slug)

  // Fetch all content to get the list of projects for the HeaderMenu
  const { items: allProjects } = await getAllContent()

  if (!experience) {
    notFound()
  }

  // FORCE SPECIFIC ERAS FOR KNOWN PAGES
  // This is a more aggressive approach to ensure the correct era is applied
  let forcedEra: string | undefined = undefined

  // Force Brown University to 2004-2007 era
  if (
    params.slug === "brown-university" ||
    experience.title.toLowerCase().includes("brown") ||
    (experience.company && experience.company.toLowerCase().includes("brown"))
  ) {
    forcedEra = "2004-2007"
  }

  // Force Yale to 2017-2019 era - Updated from 2016-2019 to 2017-2019
  if (
    params.slug === "yale-school-of-management" ||
    experience.title.toLowerCase().includes("yale") ||
    (experience.company && experience.company.toLowerCase().includes("yale"))
  ) {
    forcedEra = "2017-2019"
  }

  // Use locationSort to determine era if available
  if (experience.locationSort && locationSortToEra[experience.locationSort]) {
    forcedEra = locationSortToEra[experience.locationSort]
  }

  // Ensure era is correctly set based on start year if not forced
  let correctedEra = forcedEra || experience.era

  if (!forcedEra && experience.startYear) {
    // Map start year to correct era if not already forced
    const startYear = Number.parseInt(experience.startYear || "0", 10)
    if (startYear >= 2004 && startYear <= 2007) {
      correctedEra = "2004-2007"
    } else if (startYear >= 2008 && startYear <= 2011) {
      correctedEra = "2008-2011"
    } else if (startYear >= 2012 && startYear <= 2016) {
      // Updated from 2012-2015 to 2012-2016
      correctedEra = "2012-2016"
    } else if (startYear >= 2017 && startYear <= 2019) {
      // Updated from 2016-2019 to 2017-2019
      correctedEra = "2017-2019"
    } else if (startYear >= 2020 && startYear <= 2022) {
      correctedEra = "2020-2022"
    } else if (startYear >= 2023) {
      correctedEra = "2023-2025"
    }
  }

  // Use the corrected era for styling
  const eraStyles = getEraStyles(correctedEra)

  // Update the era in the experience object
  experience.era = correctedEra

  // Get the human-readable skills using our helper function
  const displaySkills = getSkillsForDisplay(experience)

  // Create era-specific class name for the page
  const eraClassName = `era-${experience.era.replace(/\s+/g, "-").toLowerCase()}`

  // Force a unique timestamp to prevent caching
  const timestamp = Date.now()

  // Define era-specific styles directly in the component
  // This ensures they're applied regardless of CSS caching
  const getEraBackgroundColor = (era: string) => {
    switch (era) {
      case "2004-2007":
        return "black"
      case "2008-2011":
        return "#111827"
      case "2012-2016": // Updated from 2012-2015 to 2012-2016
        return "#fffbeb"
      case "2017-2019": // Updated from 2016-2019 to 2017-2019
        return "#581c87"
      case "2020-2022":
        return "#f9fafb"
      default:
        return "white"
    }
  }

  const getEraTextColor = (era: string) => {
    switch (era) {
      case "2004-2007":
        return "white"
      case "2008-2011":
        return "#e5e7eb"
      case "2012-2016": // Updated from 2012-2015 to 2012-2016
        return "#1f2937"
      case "2017-2019": // Updated from 2016-2019 to 2017-2019
        return "#fbcfe8"
      case "2020-2022":
        return "#4b5563"
      default:
        return "#1f2937"
    }
  }

  const getEraAccentColor = (era: string) => {
    switch (era) {
      case "2004-2007":
        return "#ca8a04"
      case "2008-2011":
        return "#6b7280"
      case "2012-2016": // Updated from 2012-2015 to 2012-2016
        return "#92400e"
      case "2017-2019": // Updated from 2016-2019 to 2017-2019
        return "#9333ea"
      case "2020-2022":
        return "#4b5563"
      default:
        return "#2563eb"
    }
  }

  const getEraFontFamily = (era: string) => {
    switch (era) {
      case "2004-2007":
        return "Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serif"
      case "2008-2011":
        return "Georgia, 'Times New Roman', Times, serif"
      case "2012-2016": // Updated from 2012-2015 to 2012-2016
        return "'Times New Roman', Times, serif"
      case "2017-2019": // Updated from 2016-2019 to 2017-2019
        return "'Courier New', Courier, monospace"
      case "2020-2022":
        return "Helvetica, Arial, sans-serif"
      default:
        return "Inter, system-ui, -apple-system, sans-serif"
    }
  }

  // Get era-specific pattern/texture for backgrounds
  const getEraPattern = (era: string) => {
    switch (era) {
      case "2004-2007":
        return "repeating-linear-gradient(45deg, #000 0px, #000 2px, #111 2px, #111 4px)"
      case "2008-2011":
        return "linear-gradient(to right, #1f2937, #111827)"
      case "2012-2016": // Updated from 2012-2015 to 2012-2016
        return "url(\"data:image/svg+xml,%3Csvg width='20' height='20' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23f59e0b' fillOpacity='0.05' fillRule='evenodd'%3E%3Ccircle cx='3' cy='3' r='3'/%3E%3Ccircle cx='13' cy='13' r='3'/%3E%3C/g%3E%3C/svg%3E\")"
      case "2017-2019": // Updated from 2016-2019 to 2017-2019
        return "linear-gradient(135deg, #4c1d95 0%, #581c87 100%)"
      case "2020-2022":
        return "linear-gradient(to right, #f9fafb, #f3f4f6)"
      default:
        return "linear-gradient(to right, #ffffff, #f8fafc)"
    }
  }

  // Get era-specific border style
  const getEraBorderStyle = (era: string) => {
    switch (era) {
      case "2004-2007":
        return `4px solid ${getEraAccentColor(era)}`
      case "2008-2011":
        return `2px solid ${getEraAccentColor(era)}`
      case "2012-2016": // Updated from 2012-2015 to 2012-2016
        return `3px double ${getEraAccentColor(era)}`
      case "2017-2019": // Updated from 2016-2019 to 2017-2019
        return `4px solid ${getEraAccentColor(era)}`
      case "2020-2022":
        return `1px solid ${getEraAccentColor(era)}`
      default:
        return `2px solid ${getEraAccentColor(era)}`
    }
  }

  // Get the background and text colors based on the era
  const bgColor = getEraBackgroundColor(experience.era)
  const textColor = getEraTextColor(experience.era)
  const accentColor = getEraAccentColor(experience.era)
  const fontFamily = getEraFontFamily(experience.era)
  const pattern = getEraPattern(experience.era)
  const borderStyle = getEraBorderStyle(experience.era)

  // Get Netflix-style gradient based on era
  const getNetflixGradient = (era: string) => {
    switch (era) {
      case "2004-2007":
        return "linear-gradient(90deg, rgba(0,0,0,1) 0%, rgba(0,0,0,0.95) 20%, rgba(0,0,0,0.85) 40%, rgba(0,0,0,0.5) 60%, rgba(0,0,0,0) 100%)"
      case "2008-2011":
        return "linear-gradient(90deg, rgba(17,24,39,1) 0%, rgba(17,24,39,0.95) 20%, rgba(17,24,39,0.85) 40%, rgba(17,24,39,0.5) 60%, rgba(17,24,39,0) 100%)"
      case "2012-2016": // Updated from 2012-2015 to 2012-2016
        return "linear-gradient(90deg, rgba(255,251,235,1) 0%, rgba(255,251,235,0.95) 20%, rgba(255,251,235,0.85) 40%, rgba(255,251,235,0.5) 60%, rgba(255,251,235,0) 100%)"
      case "2017-2019": // Updated from 2016-2019 to 2017-2019
        return "linear-gradient(90deg, rgba(88,28,135,1) 0%, rgba(88,28,135,0.95) 20%, rgba(88,28,135,0.85) 40%, rgba(88,28,135,0.5) 60%, rgba(88,28,135,0) 100%)"
      case "2020-2022":
        return "linear-gradient(90deg, rgba(249,250,251,1) 0%, rgba(249,250,251,0.95) 20%, rgba(249,250,251,0.85) 40%, rgba(249,250,251,0.5) 60%, rgba(249,250,251,0) 100%)"
      default:
        return "linear-gradient(90deg, rgba(255,255,255,1) 0%, rgba(255,255,255,0.95) 20%, rgba(255,255,255,0.85) 40%, rgba(255,255,255,0.5) 60%, rgba(255,255,255,0) 100%)"
    }
  }

  const netflixGradient = getNetflixGradient(experience.era)

  return (
    <>
      {/* Pass the allProjects to the HeaderMenu component */}
      <HeaderMenu projects={allProjects} />

      <div
        className={`min-h-screen ${eraClassName}`}
        style={{
          backgroundColor: bgColor,
          color: textColor,
        }}
        data-era={experience.era}
        data-location-sort={experience.locationSort}
      >
        {/* Hero Section with Era-specific styling */}
        <div
          className="relative border-b overflow-hidden"
          style={{
            borderBottom: borderStyle,
            background: bgColor,
            height: "50vh",
            minHeight: "350px",
            maxHeight: "500px",
          }}
        >
          {/* Full-width image container */}
          <div className="absolute inset-0 w-full h-full">
            <Image
              src={
                experience.image ||
                `/placeholder.svg?height=1080&width=1920&query=${encodeURIComponent(experience.title) || "/placeholder.svg"}`
              }
              alt={experience.title}
              fill
              className={`${eraStyles.filter}`}
              priority
              quality={100}
              unoptimized={experience.image?.includes("cloudinary.com")}
              style={{
                objectFit: "cover",
                objectPosition: "center",
              }}
            />
          </div>

          {/* Netflix-style gradient overlay */}
          <div
            className="absolute inset-0 pointer-events-none"
            style={{
              background: netflixGradient,
              zIndex: 5,
            }}
          />

          {/* Content positioned on the left side */}
          <div className="absolute left-0 top-0 h-full w-full p-6 md:p-12 flex items-center z-10">
            <div className="max-w-lg">
              <div className="mb-2 flex items-center">
                <Badge
                  variant="outline"
                  className={`text-xs ${eraStyles.badge} mr-2`}
                  style={{
                    backgroundColor:
                      experience.era === "2012-2016" || experience.era === "2020-2022" || experience.era === "2023-2025"
                        ? "rgba(255, 255, 255, 0.9)"
                        : "rgba(0, 0, 0, 0.7)",
                    borderColor: accentColor,
                  }}
                >
                  {experience.type.toUpperCase()}
                </Badge>
                <span
                  className={`text-sm`}
                  style={{
                    color:
                      experience.era === "2012-2016" || experience.era === "2020-2022" || experience.era === "2023-2025"
                        ? "#1f2937"
                        : "rgba(255, 255, 255, 0.9)",
                  }}
                >
                  {experience.startYear}
                </span>
              </div>

              <h1
                className={`text-3xl md:text-5xl font-bold mb-4 drop-shadow-md`}
                style={{
                  color:
                    experience.era === "2012-2016" || experience.era === "2020-2022" || experience.era === "2023-2025"
                      ? "#1f2937"
                      : "white",
                  fontFamily: fontFamily,
                  textTransform:
                    experience.era === "2004-2007" || experience.era === "2017-2019" ? "uppercase" : "none",
                  letterSpacing: experience.era === "2017-2019" ? "0.05em" : "normal",
                  fontStyle: experience.era === "2012-2016" ? "italic" : "normal",
                }}
              >
                {experience.title}
              </h1>

              {experience.company && (
                <div className="flex items-center space-x-4 mb-6">
                  {experience.logo && (
                    <div
                      className="h-8 w-8 relative mr-2 rounded-full p-1"
                      style={{
                        backgroundColor:
                          experience.era === "2012-2016" ||
                          experience.era === "2020-2022" ||
                          experience.era === "2023-2025"
                            ? "rgba(255, 255, 255, 0.9)"
                            : "rgba(0, 0, 0, 0.7)",
                        border: `1px solid ${accentColor}`,
                      }}
                    >
                      <Image
                        src={experience.logo || "/placeholder.svg"}
                        alt={experience.company}
                        fill
                        className="object-contain"
                      />
                    </div>
                  )}
                  <span
                    className="text-lg font-medium drop-shadow-md"
                    style={{
                      color:
                        experience.era === "2012-2016" ||
                        experience.era === "2020-2022" ||
                        experience.era === "2023-2025"
                          ? "#1f2937"
                          : "white",
                    }}
                  >
                    {experience.company}
                  </span>
                </div>
              )}

              <p
                className={`text-lg max-w-md drop-shadow-md`}
                style={{
                  color:
                    experience.era === "2012-2016" || experience.era === "2020-2022" || experience.era === "2023-2025"
                      ? "rgba(31, 41, 55, 0.9)"
                      : "rgba(255, 255, 255, 0.9)",
                }}
              >
                {experience.description}
              </p>
            </div>
          </div>

          {/* Era-specific decorative elements */}
          {experience.era === "2004-2007" && (
            <div className="absolute top-0 left-0 w-full h-4 z-10" style={{ background: accentColor }}></div>
          )}
          {experience.era === "2017-2019" && (
            <div
              className="absolute bottom-0 left-0 w-full h-1 bg-gradient-to-r z-10"
              style={{
                backgroundImage: `linear-gradient(to right, ${accentColor}, transparent, ${accentColor})`,
              }}
            ></div>
          )}
        </div>

        {/* Navigation Tabs with Era-specific styling */}
        <div
          className="border-b sticky top-16 z-20 shadow-sm"
          style={{
            backgroundColor: bgColor,
            borderColor: accentColor,
          }}
        >
          <div className="flex px-6 md:px-12">
            <div
              className="py-4 px-2 border-b-2 font-medium"
              style={{
                borderColor: accentColor,
                color: accentColor,
              }}
            >
              Overview
            </div>
            <div className="py-4 px-2 text-gray-400">Details</div>
            <div className="py-4 px-2 text-gray-400">Gallery</div>
            <div className="py-4 px-2 text-gray-400">Related</div>
          </div>
        </div>

        {/* Overview Section */}
        <section className="py-12 px-6 md:px-12">
          <div className="max-w-4xl mx-auto">
            <h2
              className="text-2xl font-bold mb-6"
              style={{
                color: accentColor,
                fontFamily: fontFamily,
                fontStyle: experience.era === "2012-2016" ? "italic" : "normal",
                textTransform: experience.era === "2004-2007" || experience.era === "2017-2019" ? "uppercase" : "none",
                letterSpacing: experience.era === "2017-2019" ? "0.1em" : "normal",
              }}
            >
              Overview
            </h2>

            <div
              className="prose max-w-none mb-12"
              style={{
                color:
                  experience.era === "2004-2007"
                    ? "#d1d5db"
                    : experience.era === "2008-2011"
                      ? "#d1d5db"
                      : experience.era === "2012-2016"
                        ? "#4b5563"
                        : experience.era === "2017-2019"
                          ? "#e9d5ff"
                          : experience.era === "2020-2022"
                            ? "#4b5563"
                            : "#4b5563",
                fontFamily:
                  experience.era === "2017-2019"
                    ? "monospace"
                    : experience.era === "2012-2016"
                      ? "serif"
                      : "sans-serif",
              }}
            >
              {experience.content ? (
                <div dangerouslySetInnerHTML={{ __html: experience.content }} />
              ) : (
                <p>
                  This is an extended description of the {experience.title} experience at {experience.company}.
                </p>
              )}
            </div>

            {/* Skills Section */}
            {displaySkills.length > 0 && (
              <div className="mb-12">
                <h3
                  className="text-xl font-semibold mb-4"
                  style={{
                    color: accentColor,
                    fontFamily: fontFamily,
                  }}
                >
                  Skills
                </h3>
                <SkillsByCategory item={experience} badgeClassName={eraStyles.badge} />
              </div>
            )}

            {/* Tools Section */}
            {Array.isArray(experience.tools) && experience.tools.length > 0 && (
              <div className="mb-12">
                <h3
                  className="text-xl font-semibold mb-4"
                  style={{
                    color: accentColor,
                    fontFamily: fontFamily,
                  }}
                >
                  Tools
                </h3>
                <div className="flex flex-wrap gap-6">
                  {experience.tools.map((tool, index) => (
                    <div key={index} className="flex flex-col items-center">
                      <div
                        className="w-16 h-16 rounded-lg flex items-center justify-center mb-2 p-2 relative"
                        style={{
                          backgroundColor:
                            experience.era === "2004-2007"
                              ? "#1f2937"
                              : experience.era === "2008-2011"
                                ? "#1f2937"
                                : experience.era === "2012-2016"
                                  ? "white"
                                  : experience.era === "2017-2019"
                                    ? "#4c1d95"
                                    : experience.era === "2020-2022"
                                      ? "white"
                                      : "white",
                          borderWidth: "2px",
                          borderColor: accentColor,
                          boxShadow: "0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)",
                        }}
                      >
                        <ToolIcon
                          name={tool.name}
                          originalId={tool.originalId}
                          logo={
                            tool.logo ? `${tool.logo}${tool.logo.includes("?") ? "&" : "?"}t=${timestamp}` : undefined
                          }
                        />
                      </div>
                      <span className="text-sm text-center font-medium">{getToolDisplayName(tool)}</span>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* External Link */}
            {experience.link && (
              <div className="mb-12">
                <a
                  href={experience.link}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="inline-flex items-center px-4 py-2 rounded"
                  style={{
                    backgroundColor:
                      experience.era === "2004-2007"
                        ? "#ca8a04"
                        : experience.era === "2008-2011"
                          ? "#6b7280"
                          : experience.era === "2012-2016"
                            ? "#92400e"
                            : experience.era === "2017-2019"
                              ? "#9333ea"
                              : experience.era === "2020-2022"
                                ? "white"
                                : "white",
                    color:
                      experience.era === "2004-2007"
                        ? "black"
                        : experience.era === "2008-2011"
                          ? "white"
                          : experience.era === "2012-2016"
                            ? "white"
                            : experience.era === "2017-2019"
                              ? "white"
                              : experience.era === "2020-2022"
                                ? "#4b5563"
                                : "#2563eb",
                    borderWidth: experience.era === "2020-2022" || experience.era === "2023-2025" ? "1px" : "0",
                    borderColor: experience.era === "2020-2022" ? "#4b5563" : "#2563eb",
                    borderRadius:
                      experience.era === "2017-2019" || experience.era === "2020-2022" ? "9999px" : "0.25rem",
                    fontWeight: "600",
                    textTransform:
                      experience.era === "2004-2007" || experience.era === "2012-2016" ? "uppercase" : "normal",
                    boxShadow:
                      experience.era === "2004-2007" || experience.era === "2017-2019"
                        ? "0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)"
                        : "none",
                  }}
                >
                  <ExternalLink className="h-4 w-4 mr-2" />
                  View Project
                </a>
              </div>
            )}
          </div>
        </section>

        {/* Project Images Section */}
        {experience.projectImages && experience.projectImages.length > 0 && (
          <section
            className="py-12 px-6 md:px-12 border-t"
            style={{
              borderColor: accentColor,
            }}
          >
            <div className="max-w-4xl mx-auto">
              <h2
                className="text-2xl font-bold mb-6"
                style={{
                  color: accentColor,
                  fontFamily: fontFamily,
                  fontStyle: experience.era === "2012-2016" ? "italic" : "normal",
                  textTransform:
                    experience.era === "2004-2007" || experience.era === "2017-2019" ? "uppercase" : "none",
                }}
              >
                Gallery
              </h2>

              <div className="space-y-12">
                {experience.projectImages.map((image, index) => (
                  <div key={index} className="space-y-2">
                    <div
                      className="relative aspect-video w-full overflow-hidden rounded-lg shadow-md"
                      style={{
                        borderLeftWidth: "4px",
                        borderColor: accentColor,
                      }}
                    >
                      <Image
                        src={image.url || "/placeholder.svg"}
                        alt={image.caption || `Project image ${index + 1}`}
                        fill
                        className={`object-cover ${eraStyles.filter}`}
                        quality={100}
                        sizes="(max-width: 768px) 100vw, 800px"
                        unoptimized={image.url?.includes("cloudinary.com")}
                      />
                    </div>
                    {image.caption && <p className="text-sm italic text-center">{image.caption}</p>}
                  </div>
                ))}
              </div>
            </div>
          </section>
        )}
      </div>
    </>
  )
}
